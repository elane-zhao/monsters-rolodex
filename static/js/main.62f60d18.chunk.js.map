{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","res","json","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mUAGaA,EAAO,SAACC,GAAD,OAClB,sBAAKC,UAAU,iBAAf,UACE,qBACEC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,0BACHC,IAAI,YAEN,6BAAKL,EAAMG,QAAQG,OACnB,4BAAIN,EAAMG,QAAQI,YCNTC,G,MAAW,SAACR,GAAD,OACtB,qBAAKC,UAAU,YAAf,SACGD,EAAMS,SAASC,KAAI,SAACP,GAAD,OAClB,cAAC,EAAD,CAAMA,QAASA,GAAcA,EAAQC,WCF9BO,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACvB,uBACEC,KAAK,SACLb,UAAU,SACVW,YAAaA,EACbG,SAAUF,MCqDCG,E,kDAzDb,aAAe,IAAD,8BAEZ,gBAqBFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,QAAS,gBArB/C,EAAKC,MAAQ,CACXb,SAAU,GACVU,YAAa,IALH,E,qDAWd,WAAqB,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACf,GACL,EAAKS,SAAS,CACZT,SAAUA,S,oBAiBlB,WACE,MAAkCkB,KAAKL,MAA/Bb,EAAR,EAAQA,SAAUU,EAAlB,EAAkBA,YACZS,EAAmBnB,EAASoB,QAAO,SAAC1B,GAAD,OACvCA,EAAQG,KAAKwB,cAAcC,SAASZ,EAAYW,kBAElD,OAOE,cANA,CAMA,OAAK7B,UAAU,MAAf,UACE,oBAAIA,UAAU,SAAd,8BACA,cAAC,EAAD,CACEW,YAAY,kBACZC,aAAcc,KAAKd,eAErB,cAAC,EAAD,CAAUJ,SAAUmB,W,GApDVI,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBX,MAAK,YAAkD,IAA/CY,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.62f60d18.chunk.js","sourcesContent":["import React from 'react';\nimport './card.styles.css';\n\nexport const Card = (props) => (\n  <div className=\"card-container\">\n    <img\n      src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}\n      alt=\"monster\"\n    />\n    <h1>{props.monster.name}</h1>\n    <p>{props.monster.email}</p>\n  </div>\n);\n","import React from 'react';\nimport { Card } from '../card/card.component';\nimport './card-list.styles.css';\n\nexport const CardList = (props) => (\n  <div className=\"card-list\">\n    {props.monsters.map((monster) => (\n      <Card monster={monster} key={monster.id}></Card>\n    ))}\n  </div>\n);\n//   console.log(props);\n// props.children is the content passed within <CardList></CardList> in App.js file\n","import React from 'react';\nimport './search-box.styles.css';\n\n// use functional component if you don't need internal state nor lifecycle methods\n// easier to read and test than class component\nexport const SearchBox = ({ placeholder, handleChange }) => (\n  <input\n    type=\"search\"\n    className=\"search\"\n    placeholder={placeholder}\n    onChange={handleChange}\n  ></input>\n);\n","import React, { Component } from 'react';\nimport './App.css';\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\n\nclass App extends Component {\n  constructor() {\n    // call Component's constructor first, then we can access 'this'\n    super();\n    this.state = {\n      monsters: [],\n      searchField: '',\n    };\n\n    // this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then((res) => res.json())\n      .then((monsters) => {\n        this.setState({\n          monsters: monsters,\n        });\n      });\n  }\n\n  // In order to access 'this' correctly,\n  // Use arrow functions on any class methods you define and aren't part of React (i.e. render(), componentDidMount()).\n  handleChange = (e) => {\n    this.setState({ searchField: e.target.value }, () => {\n      // if we want to run something after setState finishes,\n      // we need to add the code inside the callback function(the 2rd argument of setState)\n      // console.log(this.state);\n    });\n  };\n\n  // built-in function in React.Component\n  // when the state gets updated(setState() is called), this render function will be called automatically to rerender the UI\n  render() {\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter((monster) =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase()),\n    );\n    return (\n      // JSX is trying to mimic what HTML does and create a virtual DOM\n      // className is an JSX attribute(similar to HTML attribute class), in order to distinguish from js class.\n      // {} means inside is js expression\n      // Anytime you use the map() function inside of render, or you have a list of the same jsx elements one after another,\n      // they need a key attribute (and CRA will warn you about it if you miss it)\n      // with the key attribute, only affected/updated items will be rerendered in the DOM\n      <div className=\"App\">\n        <h1 className=\"header\">Monsters Rolodex</h1>\n        <SearchBox\n          placeholder=\"Search Monsters\"\n          handleChange={this.handleChange}\n        ></SearchBox>\n        <CardList monsters={filteredMonsters}></CardList>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}